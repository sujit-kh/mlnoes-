{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "fdfcc10c",
   "metadata": {},
   "source": [
    "# Simple Linear Regression"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "877a2246",
   "metadata": {},
   "source": [
    "### Importing the Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "4d2d24ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ce58f2d",
   "metadata": {},
   "source": [
    "### Import Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "d7b8a305",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>YearsExperience</th>\n",
       "      <th>Salary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.1</td>\n",
       "      <td>39343.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.3</td>\n",
       "      <td>46205.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.5</td>\n",
       "      <td>37731.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2.0</td>\n",
       "      <td>43525.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.2</td>\n",
       "      <td>39891.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   YearsExperience   Salary\n",
       "0              1.1  39343.0\n",
       "1              1.3  46205.0\n",
       "2              1.5  37731.0\n",
       "3              2.0  43525.0\n",
       "4              2.2  39891.0"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset=pd.read_csv('Salary_Data.csv')\n",
    "dataset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "449ded29",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(30, 2)"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "a9e0feb3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>YearsExperience</th>\n",
       "      <th>Salary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>30.000000</td>\n",
       "      <td>30.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>5.313333</td>\n",
       "      <td>76003.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>2.837888</td>\n",
       "      <td>27414.429785</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.100000</td>\n",
       "      <td>37731.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>3.200000</td>\n",
       "      <td>56720.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>4.700000</td>\n",
       "      <td>65237.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>7.700000</td>\n",
       "      <td>100544.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>10.500000</td>\n",
       "      <td>122391.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       YearsExperience         Salary\n",
       "count        30.000000      30.000000\n",
       "mean          5.313333   76003.000000\n",
       "std           2.837888   27414.429785\n",
       "min           1.100000   37731.000000\n",
       "25%           3.200000   56720.750000\n",
       "50%           4.700000   65237.000000\n",
       "75%           7.700000  100544.750000\n",
       "max          10.500000  122391.000000"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "5a4cd291",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "30"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset['Salary'].nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "79fc5680",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "28"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset['YearsExperience'].nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "6b73985c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:ylabel='Frequency'>"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "dataset['Salary'].plot.hist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "c5e4d958",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:ylabel='Frequency'>"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "dataset['YearsExperience'].plot.hist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "ec60057a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>YearsExperience</th>\n",
       "      <th>Salary</th>\n",
       "      <th>Experiencecategory</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.1</td>\n",
       "      <td>39343.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.3</td>\n",
       "      <td>46205.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.5</td>\n",
       "      <td>37731.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2.0</td>\n",
       "      <td>43525.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.2</td>\n",
       "      <td>39891.0</td>\n",
       "      <td>B</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   YearsExperience   Salary Experiencecategory\n",
       "0              1.1  39343.0                  A\n",
       "1              1.3  46205.0                  A\n",
       "2              1.5  37731.0                  A\n",
       "3              2.0  43525.0                  A\n",
       "4              2.2  39891.0                  B"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Experience_category = []\n",
    "for i in range (0, len  (dataset ['YearsExperience'])):\n",
    "    if dataset['YearsExperience'][i] <= 2:\n",
    "        Experience_category.append ('A');\n",
    "    elif 2 < dataset['YearsExperience'][i] <= 4:\n",
    "        Experience_category.append ('B');\n",
    "    elif 4 < dataset['YearsExperience'][i] <= 6:\n",
    "        Experience_category.append ('C');\n",
    "    elif 6 < dataset['YearsExperience'][i] <= 8:\n",
    "        Experience_category.append ('D');\n",
    "    elif 8 < dataset['YearsExperience'][i] <= 10:\n",
    "        Experience_category.append ('E');\n",
    "    else:\n",
    "        Experience_category.append ('F');\n",
    "        \n",
    "exp_df = pd.DataFrame (data = Experience_category, columns = ['Experiencecategory'])\n",
    "augu_df = pd.concat([dataset, exp_df], axis = 1)\n",
    "augu_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "6aed82cb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Experiencecategory\n",
       "A    4\n",
       "B    9\n",
       "C    7\n",
       "D    3\n",
       "E    5\n",
       "F    2\n",
       "dtype: int64"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "augu_df.groupby('Experiencecategory').size()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "5f3e8345",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Experiencecategory', ylabel='count'>"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot ( x = 'Experiencecategory', data = augu_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "215ec5a9",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "408da87e",
   "metadata": {},
   "source": [
    "### Split data in dependent and independent variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5dd23c80",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Independent Variable\n",
    "X=dataset.iloc[:,:-1].values\n",
    "\n",
    "#Dependent Variable\n",
    "y=dataset.iloc[:,-1].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ead43a52",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1.1],\n",
       "       [1.3],\n",
       "       [1.5],\n",
       "       [2. ],\n",
       "       [2.2]])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "edea25ca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([39343., 46205., 37731., 43525., 39891.])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af4799c6",
   "metadata": {},
   "source": [
    "### Splitting the dataset (Training and Testing)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "803ea16e",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "fe1c0edb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 2.9],\n",
       "       [ 5.1],\n",
       "       [ 3.2],\n",
       "       [ 4.5],\n",
       "       [ 8.2],\n",
       "       [ 6.8],\n",
       "       [ 1.3],\n",
       "       [10.5],\n",
       "       [ 3. ],\n",
       "       [ 2.2],\n",
       "       [ 5.9],\n",
       "       [ 6. ],\n",
       "       [ 3.7],\n",
       "       [ 3.2],\n",
       "       [ 9. ],\n",
       "       [ 2. ],\n",
       "       [ 1.1],\n",
       "       [ 7.1],\n",
       "       [ 4.9],\n",
       "       [ 4. ]])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train, X_test, y_train,y_test =train_test_split(X,y,test_size=1/3, random_state=0)\n",
    "X_train"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7d674009",
   "metadata": {},
   "source": [
    "### Training the Simple Regression Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ac95a0d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LinearRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "0c4a78e7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg=LinearRegression()\n",
    "reg.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "06748de4",
   "metadata": {},
   "source": [
    "### Prediction of Testing dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "81c32fac",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 40835.10590871, 123079.39940819,  65134.55626083,  63265.36777221,\n",
       "       115602.64545369, 108125.8914992 , 116537.23969801,  64199.96201652,\n",
       "        76349.68719258, 100649.1375447 ])"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred=reg.predict(X_test)\n",
    "y_pred"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9cf5c58d",
   "metadata": {},
   "source": [
    "### Check the Accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "c93c10ea",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9749154407708353\n"
     ]
    }
   ],
   "source": [
    "print(reg.score(X_test,y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "33069658",
   "metadata": {},
   "source": [
    "### Visualising the results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "4a32861d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1a6775a9640>]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(X_train,y_train,color='red')\n",
    "plt.plot(X_train, reg.predict(X_train), color='blue')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "2fa6c209",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1a6776a6e20>]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(X_test,y_test,color='red')\n",
    "plt.plot(X_train, reg.predict(X_train), color='blue')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9da4d6fa",
   "metadata": {},
   "source": [
    "# Simple Linear Regression (Example 2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "afd4061b",
   "metadata": {},
   "source": [
    "### Importing the Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "61ee9210",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a9bd7b6c",
   "metadata": {},
   "source": [
    "### Import Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "12e26927",
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset=pd.read_csv('headbrain.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "dcfbacc9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age Range</th>\n",
       "      <th>Head Size(cm^3)</th>\n",
       "      <th>Brain Weight(grams)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4512</td>\n",
       "      <td>1530</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3738</td>\n",
       "      <td>1297</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4261</td>\n",
       "      <td>1335</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3777</td>\n",
       "      <td>1282</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4177</td>\n",
       "      <td>1590</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Gender  Age Range  Head Size(cm^3)  Brain Weight(grams)\n",
       "0       1          1             4512                 1530\n",
       "1       1          1             3738                 1297\n",
       "2       1          1             4261                 1335\n",
       "3       1          1             3777                 1282\n",
       "4       1          1             4177                 1590"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "13d86e1a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(237, 4)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b25bceb2",
   "metadata": {},
   "source": [
    "### Split data in dependent and independent variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "ab1743f7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Independent Variable\n",
    "X=dataset.iloc[:,2].values\n",
    "\n",
    "#Dependent Variable\n",
    "y=dataset.iloc[:,-1].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "a8a8a482",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([4512, 3738, 4261, 3777, 4177], dtype=int64)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "f4670dfd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# here we need to reshape X, because we cannot use Rank 1 matrix in scikit learn\n",
    "\n",
    "# Total no. of values\n",
    "m = len(X)\n",
    "\n",
    "# Reshape X\n",
    "X = X.reshape((m,1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "9049eb4b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[4512],\n",
       "       [3738],\n",
       "       [4261],\n",
       "       [3777],\n",
       "       [4177]], dtype=int64)"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "c7ce57dc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1530, 1297, 1335, 1282, 1590], dtype=int64)"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3986ca33",
   "metadata": {},
   "source": [
    "### Splitting the dataset (Training and Testing)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "36ca99a8",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "4fd5e045",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[3777],\n",
       "       [3302],\n",
       "       [4747],\n",
       "       [3787],\n",
       "       [3735],\n",
       "       [3866],\n",
       "       [3890],\n",
       "       [3582],\n",
       "       [3695],\n",
       "       [4424],\n",
       "       [3609],\n",
       "       [4051],\n",
       "       [4012],\n",
       "       [3703],\n",
       "       [3830],\n",
       "       [3793],\n",
       "       [4006],\n",
       "       [3548],\n",
       "       [3853],\n",
       "       [3309],\n",
       "       [3614],\n",
       "       [3360],\n",
       "       [3704],\n",
       "       [3566],\n",
       "       [3505],\n",
       "       [3832],\n",
       "       [4022],\n",
       "       [3891],\n",
       "       [3586],\n",
       "       [3878],\n",
       "       [3707],\n",
       "       [4308],\n",
       "       [3779],\n",
       "       [3214],\n",
       "       [3791],\n",
       "       [2989],\n",
       "       [4442],\n",
       "       [3666],\n",
       "       [4261],\n",
       "       [3669],\n",
       "       [3903],\n",
       "       [3381],\n",
       "       [3804],\n",
       "       [3354],\n",
       "       [3443],\n",
       "       [3436],\n",
       "       [4057],\n",
       "       [4204],\n",
       "       [3685],\n",
       "       [3571],\n",
       "       [3503],\n",
       "       [3654],\n",
       "       [3899],\n",
       "       [3156],\n",
       "       [3284],\n",
       "       [3594],\n",
       "       [4512],\n",
       "       [3700],\n",
       "       [3779],\n",
       "       [4381],\n",
       "       [3644],\n",
       "       [3641],\n",
       "       [3850],\n",
       "       [3233],\n",
       "       [3530],\n",
       "       [3710],\n",
       "       [3438],\n",
       "       [3930],\n",
       "       [3495],\n",
       "       [3532],\n",
       "       [3165],\n",
       "       [3352],\n",
       "       [3785],\n",
       "       [4430],\n",
       "       [3933],\n",
       "       [4200],\n",
       "       [2864],\n",
       "       [3979],\n",
       "       [3228],\n",
       "       [3058],\n",
       "       [3689],\n",
       "       [3318],\n",
       "       [3277],\n",
       "       [3993],\n",
       "       [3937],\n",
       "       [3876],\n",
       "       [3814],\n",
       "       [4166],\n",
       "       [3329],\n",
       "       [3738],\n",
       "       [3399],\n",
       "       [3394],\n",
       "       [4315],\n",
       "       [3648],\n",
       "       [4046],\n",
       "       [3692],\n",
       "       [3466],\n",
       "       [3334],\n",
       "       [3667],\n",
       "       [4063],\n",
       "       [3497],\n",
       "       [3158],\n",
       "       [4053],\n",
       "       [4158],\n",
       "       [3454],\n",
       "       [3181],\n",
       "       [3383],\n",
       "       [3292],\n",
       "       [3323],\n",
       "       [3796],\n",
       "       [3556],\n",
       "       [3124],\n",
       "       [3642],\n",
       "       [2720],\n",
       "       [3389],\n",
       "       [4103],\n",
       "       [3358],\n",
       "       [3175],\n",
       "       [3493],\n",
       "       [3267],\n",
       "       [4175],\n",
       "       [3561],\n",
       "       [3478],\n",
       "       [3249],\n",
       "       [3394],\n",
       "       [3203],\n",
       "       [3835],\n",
       "       [3344],\n",
       "       [3499],\n",
       "       [3451],\n",
       "       [3218],\n",
       "       [4121],\n",
       "       [3362],\n",
       "       [4423],\n",
       "       [3082],\n",
       "       [3856],\n",
       "       [3740],\n",
       "       [3615],\n",
       "       [3716],\n",
       "       [3492],\n",
       "       [3687],\n",
       "       [3935],\n",
       "       [3572],\n",
       "       [3506],\n",
       "       [3246],\n",
       "       [4008],\n",
       "       [3406],\n",
       "       [3527],\n",
       "       [4046],\n",
       "       [3580],\n",
       "       [3982],\n",
       "       [3661],\n",
       "       [2773],\n",
       "       [3372],\n",
       "       [3000],\n",
       "       [3900],\n",
       "       [3165],\n",
       "       [3571]], dtype=int64)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train, X_test, y_train,y_test =train_test_split(X,y,test_size=1/3, random_state=0)\n",
    "X_train"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98823a3b",
   "metadata": {},
   "source": [
    "### Training the Simple Regression Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "cf89947d",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LinearRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "f11a57be",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg=LinearRegression()\n",
    "reg.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae3a65d1",
   "metadata": {},
   "source": [
    "### Prediction of Testing dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "1892054f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1303.83322923, 1292.73537163, 1381.5182324 , 1253.38842198,\n",
       "       1318.46222333, 1284.41197844, 1496.53239293, 1255.65843831,\n",
       "       1382.02268047, 1335.86568183, 1402.20060337, 1138.12203741,\n",
       "       1201.43027051, 1331.57787322, 1219.84262516, 1231.9493789 ,\n",
       "       1280.62861789, 1352.26024419, 1242.03834035, 1275.83636121,\n",
       "       1236.74163559, 1413.80290904, 1349.99022786, 1268.77408819,\n",
       "       1324.01115213, 1309.8866061 , 1164.35333718, 1282.64641018,\n",
       "       1481.90339882, 1085.1549898 , 1188.8190687 , 1269.78298434,\n",
       "       1242.03834035, 1374.70818342, 1338.89237027, 1225.39155396,\n",
       "       1323.75892809, 1372.18594305, 1329.05563285, 1244.81280475,\n",
       "       1337.63125009, 1145.18431043, 1143.92319025, 1342.17128274,\n",
       "       1437.25974441, 1262.21626325, 1222.36486552, 1157.79551224,\n",
       "       1147.45432675, 1138.62648548, 1222.61708956, 1288.19533898,\n",
       "       1266.7562959 , 1414.05513307, 1220.59929727, 1191.5935331 ,\n",
       "       1139.13093356, 1183.77458797, 1304.58990134, 1105.83736077,\n",
       "       1164.10111315, 1219.84262516, 1196.13356575, 1221.86041745,\n",
       "       1246.578373  , 1347.97243557, 1240.52499613, 1418.09071765,\n",
       "       1277.09748139, 1220.34707323, 1189.07129273, 1441.54755302,\n",
       "       1225.89600203, 1382.52712854, 1261.96403921, 1160.56997664,\n",
       "       1105.3329127 , 1363.86254986, 1425.90966278])"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred=reg.predict(X_test)\n",
    "y_pred"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a7efedc9",
   "metadata": {},
   "source": [
    "### Check the Accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "0db1ffb0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.6725247251907991\n"
     ]
    }
   ],
   "source": [
    "print(reg.score(X_test,y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "533adb6f",
   "metadata": {},
   "source": [
    "### Visualising the results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "276beda4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1a6779987f0>]"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(X_train,y_train,color='red')\n",
    "plt.plot(X_train, reg.predict(X_train), color='blue')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "501146c5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1a677a0a9d0>]"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(X_test,y_test,color='red')\n",
    "plt.plot(X_train, reg.predict(X_train), color='blue')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f7e76a18",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
